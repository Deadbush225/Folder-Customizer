name: Build and Release

on:
 push:
  tags:
   - "v*"
 workflow_dispatch:

permissions:
 contents: write

jobs:
 build-linux:
  runs-on: ubuntu-latest

  steps:
   - uses: actions/checkout@v4

   - name: Read version
     id: ver
     run: echo "version=$(jq -r .version manifest.json)" >> $GITHUB_OUTPUT

   - name: Install Qt6 & deps
     run: |
      sudo apt update
      sudo apt install -y qt6-base-dev qt6-tools-dev cmake build-essential
      sudo apt install -y libgl1-mesa-dev libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev libxcb1-dev libxcb-util-dev libxcb-xkb-dev
      # Boost for program_options
      sudo apt install -y libboost-program-options-dev libboost-dev

   - name: Build application
     run: |
      cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build -- -j 2
          cmake --build build --target install_local --config Release -j 2 --verbose

   - name: Verify install output
     run: |
      echo "Listing installed files under ./install"
      ls -la ./install || true
      echo "Listing install/bin directory"
      ls -la ./install/bin || true
      echo "Tree (maxdepth 3)"
      find ./install -maxdepth 3 -printf '%y %p\n' || true

   - name: Create packages
     run: |
      FORCE_RPM_TARBALL=1 bash ./scripts/deploy.sh linux

   - name: Upload Linux artifacts
     uses: actions/upload-artifact@v4
     with:
      name: linux-packages
      path: |
       dist/*.AppImage
       dist/*.deb
       dist/*.rpm
       dist/*.tar.gz

 build-windows:
  runs-on: windows-latest

  steps:
   - uses: actions/checkout@v4

   - name: Install Qt6 (MSVC)
     uses: jurplel/install-qt-action@v3
     with:
      version: "6.7.3"
      host: "windows"
      target: "desktop"
      arch: "win64_msvc2019_64"

   - name: Build application (MSVC)
     run: |
      cmake -B build -G "Visual Studio 17 2022" -A x64 --debug-output
      cmake --build build --config Release -j 4

   - name: Install and deploy Qt dependencies
     run: |
      cmake --build build --target install_local --config Release -j 2 --verbose

   - name: Create Windows installer
     run: |
      pwsh -ExecutionPolicy Bypass -File "./scripts/update_installer.ps1"

   - name: Upload Windows artifacts
     uses: actions/upload-artifact@v4
     with:
      name: windows-installer
      path: windows-installer/*.exe
      if-no-files-found: error

 release:
  needs: [build-linux, build-windows]
  runs-on: ubuntu-latest
  if: startsWith(github.ref, 'refs/tags/')

  steps:
   - uses: actions/checkout@v4
     with:
      fetch-depth: 0
      fetch-tags: true

   - name: Read version
     id: ver
     run: echo "version=$(jq -r .version manifest.json)" >> $GITHUB_OUTPUT

   - name: Download all artifacts
     uses: actions/download-artifact@v4

   - name: Compute previous tag
     id: prev
     shell: bash
     run: |
      git fetch --tags --force
      current="${GITHUB_REF_NAME}"
      prev=$(git tag --sort=-v:refname | grep -E '^v[0-9]+' | grep -v "^${current}$" | head -n1)
      echo "prev_tag=${prev}" >> $GITHUB_OUTPUT

   - name: Render release body
     id: body
     shell: bash
     run: |
      BODY_TEMPLATE="scripts/release_template.md"
      BODY_OUT="scripts/release_body.md"
      cp "$BODY_TEMPLATE" "$BODY_OUT"
      echo "" >> "$BODY_OUT"
      if [ -n "${{ steps.prev.outputs.prev_tag }}" ]; then
        echo "Full Changelog: https://github.com/${{ github.repository }}/compare/${{ steps.prev.outputs.prev_tag }}...${{ github.ref_name }}" >> "$BODY_OUT"
      else
        echo "Full Changelog: https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}" >> "$BODY_OUT"
      fi

   - name: Create Release
     uses: softprops/action-gh-release@v1
     with:
      name: Folder Customizer v${{ steps.ver.outputs.version }}
      tag_name: ${{ github.ref_name }}
      body_path: scripts/release_body.md
      files: |
       linux-packages/*
       windows-installer/*
      draft: false
      prerelease: false
      generate_release_notes: false
      token: ${{ secrets.GITHUB_TOKEN }}
